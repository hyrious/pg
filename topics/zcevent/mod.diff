diff --git a/InteractiveEvent.js b/InteractiveEvent-mod.js
index b2126c1..c51c6c3 100644
--- a/InteractiveEvent.js
+++ b/InteractiveEvent-mod.js
@@ -1,5 +1,11 @@
 //===========================================================================
-// 真实互动事件
+// 真实互动事件 - 定制版 (修改 testDistance 函数)
+//-------––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
+// 需要在 quxios 的 QMovement.js 脚本之后使用
+// 
+// 定制内容
+// 1. 使用 QMovement 的碰撞盒
+// 2. <press> 中添加一个 dir 参数过滤出现时机
 //===========================================================================
 
 /*:zh
@@ -17,11 +23,13 @@
  * 1. 事件备注栏要有 <真实互动事件> (包括 < 尖括号 > 符号)
  * 2. 去掉不满足执行条件的事件
  * 3. 剩下的事件中, 包含以下注释的事件页是「可用操作」
- *    1. <press: key icon_id text style_id>
+ *    1. <press: key icon_id text style_id dir>
  *       key      - 按键
  *       icon_id  - 按键图标
  *       text     - 操作文本, 不能有空格
  *       style_id - 文本样式
+ *       dir      - [2,4,6,8], 不能有空格, 在碰撞后检测主角方向, 此参数可选,
+ *                  2 下, 4 左, 6 右, 8 上
  *    2. <name: text style_id>
  *       text     - 当该页出现在最右侧且有效时, 可用操作列表的标题, 不能有空格
  *       style_id - 标题文本样式
@@ -41,8 +49,27 @@ void (function() {
 
     // 高级: 自定义距离判定方式 (覆盖 Distance 配置)
     function testDistance(event, player) {
-        var distance = Math.abs(event.x - player.x) + Math.abs(event.y - player.y);
-        return distance <= Distance;
+        // 飞行时禁用
+        if (player._characterName === "$Actor1_2") {
+            return false;
+        }
+        // 碰撞盒检测
+        var dist = 3;
+        var type = 'interaction';
+        var dirs = [2, 4, 6, 8];
+        var result = false;
+        for (var i in dirs) {
+            var dir = dirs[i];
+            var x1 = $gameMap.roundPXWithDirection(player._px, dir, dist);
+            var y1 = $gameMap.roundPYWithDirection(player._py, dir, dist);
+            player.collider(type).moveTo(x1, y1);
+            if (player.collidedWithCharacter(type, event)) {
+                result = true;
+                break;
+            }
+        }
+        player.collider(type).moveTo(player._px, player._py);
+        return result;
     }
 
     // 参考 Input.keyMapper, <press> 中声明的按键会使用
@@ -65,6 +92,7 @@ void (function() {
         this._interactiveEventPageIndex = -1;
         this._needsRefreshActions = true;
         this._emitRefreshActionsToSprite = false;
+        this._lastPlayerDirection = 0;
     };
 
     Game_Event.prototype.isInteractiveEvent = function() {
@@ -82,6 +110,12 @@ void (function() {
         this._needsRefreshActions = true;
     };
 
+    // "[2]" -> [2]
+    function parseArray(str) {
+        if (!str) return null;
+        return eval(str);
+    }
+
     Game_Event.prototype.refreshInteractiveActions = function() {
         var actions = [];
         var pages = this.event().pages;
@@ -101,15 +135,23 @@ void (function() {
                         action.name = matchName[1];
                         action.nameStyle = parseInt(matchName[2]);
                     }
-                    var matchPress = comment.match(/<press:\s*(\S+)\s+(\d+)\s+(\S+)\s+(\d+)>/);
+                    var matchPress = comment.match(/<press:\s*(\S+)\s+(\d+)\s+(\S+)\s+(\d+)(?:\s+(\S+))?>/);
                     if (matchPress) {
                         action.press = matchPress[1];
                         action.pressIcon = parseInt(matchPress[2]);
                         action.pressText = matchPress[3];
                         action.pressStyle = parseInt(matchPress[4]);
+                        action.pressDir = parseArray(matchPress[5]);
                     }
                 }
             }
+            // 3. 定制内容: 考虑角色方向
+            if (action.pressDir) {
+                if (!action.pressDir.includes($gamePlayer.direction())) {
+                    // 若方向不满足, 跳过此页
+                    continue;
+                }
+            }
             if (action.press) {
                 actions.push(action);
             } else {
@@ -141,6 +183,11 @@ void (function() {
     Game_Event.prototype.update = function() {
         _updateEvent.call(this);
         if (this.isInteractiveEvent()) {
+            var direction = $gamePlayer.direction();
+            if (direction !== this._lastPlayerDirection) {
+                this._lastPlayerDirection = direction;
+                this.requestRefreshActions();
+            }
             this.updateInteractiveEventActions();
             if (this._interactiveEventActions) {
                 for (var i in this._interactiveEventActions) {
